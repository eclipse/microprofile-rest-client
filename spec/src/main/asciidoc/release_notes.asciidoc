//
// Copyright (c) 2016-2021 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// John D. Ament, Andy McCright

== Release Notes

[[release_notes_30]]
=== Release Notes for MicroProfile Rest Client 3.0

A full list of changes delivered in the 3.0 release can be found at
link:https://github.com/eclipse/microprofile-rest-client/milestone/8?closed=1[MicroProfile Rest Client 3.0 Milestone].

==== Incompatible Changes
This release aligns with Jakarta EE 9.1, so it won't work with earlier versions of Jakarta or Java EE.

==== API/SPI Changes
There are no functional changes introduced in this release, except the dependency updating from javax to jakarta.


[[release_notes_20]]
=== Release Notes for MicroProfile Rest Client 2.0

Changes since 1.4:

- Defined that CDI-managed providers should be used instead of creating a new instance, if applicable.
- Support different configurations for collections used in query parameters.
- Added proxy server configuration support.
- Added configuration for automatically following redirect responses.
- Added support for JSON-B configuration via `ContextResolver<Jsonb>`.
- Added support for Server Sent Events.
- Changed dependency scope for most dependencies to `provided`.
- Update to use Jakarta EE 8 dependencies.

*Note:* Prior to this release it may have been possible to use the MicroProfile Rest Client APIs with Java EE 7
APIs, which were added to the user application via the `compile` Maven scope. This is no longer possible as the
APIs now depend on Jakarta EE 8 APIs and they must be provided by the implementation container (`provided` scope).

[[release_notes_14]]
=== Release Notes for MicroProfile Rest Client 1.4

Changes since 1.3:

- Ensure CDI and optionally JAX-RS injection into `ClientHeadersFactory`.
- Specified `@Target` to `@RestClient` annotation.
- Removed recursive classloader check when resolving service loader for Rest Client SPI.
- Updated ParamConverter TCK test case to be more realistic (converting String-to-Widget rather than String-to-String).
- Fixed Javadoc warnings.

[[release_notes_13]]
=== Release Notes for MicroProfile Rest Client 1.3

Changes since 1.2:

- Spec-defined SSL support via new `RestClientBuilder` methods and MP Config properties.
- Allow client proxies to be cast to `Closeable`/`AutoCloseable`.
- Simpler configuration using configKeys.
- Defined `application/json` to be the default MediaType if none is specified in `@Produces`/`@Consumes`.

[[release_notes_12]]
=== Release Notes for MicroProfile Rest Client 1.2

Changes since 1.1:

- Generate headers en masse, including propagation of headers from inbound JAX-RS requests.
- New `@ClientHeaderParam` API for defining HTTP headers without modifying the client interface method signature.
- New section documenting the <<integration.asciidoc#integration>>.
- Clarification on built-in JSON-B/JSON-P entity providers.
- New `baseUri` property added to `@RegisterRestClient` annotation.
- New `connectTimeout` and `readTimeout` methods on `RestClientBuilder` - and corresponding MP Config properties.
- `ClientRequestContext` should have a property named `org.eclipse.microprofile.rest.client.invokedMethod` containing the Rest Client `Method` currently being invoked.
- New SPI interface, `RestClientListener` interface for intercepting new client instances.
- New `removeContext` method for `AsyncInvocationInterceptor` interface.

[[release_notes_11]]
=== Release Notes for MicroProfile Rest Client 1.1

Changes since 1.0:

- Asynchronous method support when Rest Client interfaces return `CompletionStage`.
- New SPI interface, `RestClientBuilderListener` for intercepting new client builders.
- `@RegisterRestClient` is now considered a bean-defining annotation.
- New `baseUri` method on `RestClientBuilder`.


[[release_notes_10]]
=== Release Notes for MicroProfile Rest Client 1.0

http://download.eclipse.org/microprofile/microprofile-rest-client-1.0/microprofile-rest-client.pdf[MicroProfile Rest Client Spec PDF]
http://download.eclipse.org/microprofile/microprofile-rest-client-1.0/microprofile-rest-client.html[MicroProfile Rest Client Spec HTML]
http://download.eclipse.org/microprofile/microprofile-rest-client-1.0/apidocs/[MicroProfile Rest Client Spec Javadocs]

Key features:

- Built in alignment to other MicroProfile Specs - automatic registration of JSON provider, CDI support for injecting clients, fully configurable clients via MicroProfile Config
- Can map JAX-RS `Response` objects into `Exception`s to be handled by your client code
- Fully declarative annotation driven configuration, with supported builder patterns
- Closely aligned to JAX-RS with configuration and behavior based on the JAX-RS `Client` object

To get started, simply add this dependency to your project, assuming you have an implementation available:

[source,xml]
----
<dependency>
    <groupId>org.eclipse.microprofile.rest.client</groupId>
    <artifactId>microprofile-rest-client-api</artifactId>
    <version>1.0</version>
    <scope>provided</scope>
</dependency>
----

And then programmatically create an interface:

[source,java]
----
public interface SimpleGetApi {
    @GET
    Response executeGet();
}
// in your client code
SimpleGetApi simpleGetApi = RestClientBuilder.newBuilder()
            .baseUri(getApplicationUri())
            .build(SimpleGetApi.class);
----

or you can use CDI to inject it:

[source,java]
----
@Path("/")
@Dependent
@RegisterRestClient
public interface SimpleGetApi {
    @GET
    Response executeGet();
}
// in your client code
@Inject
private SimpleGetApi simpleGetApi
// in your config source
com.mycompany.myapp.client.SimpleGetApi/mp-rest/url=http://microprofile.io
----
