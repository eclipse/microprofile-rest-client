//
// Copyright (c) 2016-2017 Contributors to the Eclipse Foundation
//
// See the NOTICE file(s) distributed with this work for additional
// information regarding copyright ownership.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// You may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// Contributors:
// John D. Ament

[[release_notes_10]]
== Release Notes for MicroProfile Rest Client 1.0

http://download.eclipse.org/microprofile/microprofile-rest-client-1.0/microprofile-rest-client.pdf[MicroProfile Rest Client Spec PDF]
http://download.eclipse.org/microprofile/microprofile-rest-client-1.0/microprofile-rest-client.html[MicroProfile Rest Client Spec HTML]
http://download.eclipse.org/microprofile/microprofile-rest-client-1.0/apidocs/[MicroProfile Rest Client Spec Javadocs]

Key features:

- Built in alignment to other MicroProfile Specs - automatic registration of JSON provider, CDI support for injecting clients, fully configurable clients via MicroProfile Config
- Can map JAX-RS `Response` objects into `Exception`s to be handled by your client code
- Fully declarative annotation driven configuration, with supported builder patterns
- Closely aligned to JAX-RS with configuration and behavior based on the JAX-RS `Client` object

To get started, simply add this dependency to your project, assuming you have an implementation available:

[source,xml]
----
<dependency>
    <groupId>org.eclipse.microprofile.rest.client</groupId>
    <artifactId>microprofile-rest-client-api</artifactId>
    <version>1.0</version>
    <scope>provided</scope>
</dependency>
----

And then programmatically create an interface:

[source,java]
----
public interface SimpleGetApi {
    @GET
    Response executeGet();
}
// in your client code
SimpleGetApi simpleGetApi = RestClientBuilder.newBuilder()
            .baseUrl(getApplicationUrl())
            .build(SimpleGetApi.class);
----

or you can use CDI to inject it:

[source,java]
----
@Path("/")
@Dependent
@RegisterRestClient
public interface SimpleGetApi {
    @GET
    Response executeGet();
}
// in your client code
@Inject
private SimpleGetApi simpleGetApi
// in your config source
com.mycompany.myapp.client.SimpleGetApi/mp-rest/url=http://microprofile.io
----
