//
// Copyright (c) 2017 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[programmatic_lookup]]
== MicroProfile Rest Client Provider Registration

The RestClientBuilder interface extends the `Configurable` interface from JAX-RS, allowing a user to register custom providers while its being built.  The behavior of the providers supported is defined by the JAX-RS Client API specification.  Below is a list of provider types expected to be supported by an implementation:

=== ClientResponseFilter

Filters of type `ClientResponseFilter` are invoked in order when a response is received from a remote service.

=== ClientRequestFilter

Filters of type `ClientRequestFilter` are invoked in order when a request is made to a remote service.

=== MessageBodyReader

The `MessageBodyReader` interface defined by JAX-RS allows the entity to be read from the API response after invocation.

=== MessageBodyWriter

The `MessageBodyWriter` interface defined by JAX-RS allows a request body to be written in the request for `@POST`, `@PUT` operations, as well as other HTTP methods that support bodies.

=== ParamConverter

The `ParamConverter` interface defined by JAX-RS allows a parameter in a resource method to be converted to a format to be used in a request or a response.

=== ReaderInterceptor

The `ReaderInterceptor` interface is a listener for when a read occurs against the response received from a remote service call.

=== WriterInterceptor

The `WriterInterceptor` interface is a listener for when a write occurs to the stream to be sent on the remote service invocation.

=== ResponseExceptionMapper

The `ResponseExceptionMapper` is specific to MicroProfile Rest Client.  This mapper will take a `Response` object retrieved via an invocation of a client and convert it to a `Throwable`, if applicable.  The runtime should scan all of the registered mappers, sort them ascending based on `getPriority()`, find the ones that can handle the given `Response`, and invoke them.  The first one discovered where `toThrowable` returns a non-null `Throwable` will be thrown by the runtime.

==== How to Implement ResponseExceptionMapper

The specification provides default methods for `getPriority()` and `handles(Response)` methods.  Priority is meant to be derived via a `@Priority` annotation added to the `ResponseExceptionMapper` implementation.  The runtime will sort ascending, taking the one with the lowest numeric value first to check if it can handle the `Response` object.  The usage of ascending sorting is done to be consistent with JAX-RS behavior.

Likewise, the `handles` method by default will handle any response code >= 400.  You may override this behavior if you so choose to handle other response codes (both a smaller ranger and a larger range are expected).  If an implementation reads the body, it must properly reset the underlying stream.

The `toThrowable(Response)` method actually does the conversion work.  This method should not raise any `Throwable`, instead just return a `Throwable` if it can.  This method may return `null` if no throwable should be raised.

Any methods that read the response body as a stream must ensure that they reset the stream.

==== Built in ResponseExceptionMapper

Each implementation will provide out of the box a `ResponseExceptionMapper` implementation that will map the response into a `WebApplicationException` whenever the response status code is >= 400.  It has a priority of `Integer.MAX_VALUE`.  It is meant to be used as a fall back whenever an error is encountered.  This mapper will be registered by default to all client interfaces.

This behavior can be disabled by adding a configuration property `microprofile.rest.client.disable.default.mapper` with value `true` that will be resolved as a `boolean` via MicroProfile Config.

It can also be disabled on a per client basis by using the same property when building the client, `RestClientBuilder.newBuilder().property("microprofile.rest.client.disable.default.mapper",true)`

== Provider Declaration

In addition to defining providers via the client definition, interfaces may use the `@RegisterProviders` annotation to define classes to be registered as providers in addition to providers registered via the `RestClientBuilder`
