//
// Copyright (c) 2017 Contributors to the Eclipse Foundation
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

[[programmatic_lookup]]
== MicroProfile Rest Client Provider Registration

The RestClientBuilder interface extends the `Configurable` interface from JAX-RS, allowing a user to register custom providers while its being built.  The behavior of the providers supported is defined by the JAX-RS Client API specification.  Below is a list of provider types expected to be supported by an implementation:

=== ClientResponseFilter

Filters of type `ClientResponseFilter` are invoked in order when a response is received from a remote service.

=== ClientRequestFilter

Filters of type `ClientRequestFilter` are invoked in order when a request is made to a remote service.

=== MessageBodyReader

The `MessageBodyReader` interface defined by JAX-RS allows the entity to be read from the API response after invocation.

=== MessageBodyWriter

The `MessageBodyWriter` interface defined by JAX-RS allows a request body to be written in the request for `@POST`, `@PUT` operations, as well as other HTTP methods that support bodies.

=== ParamConverter

The `ParamConverter` interface defined by JAX-RS allows a parameter in a resource method to be converted to a format to be used in a request or a response.

=== ReaderInterceptor

The `ReaderInterceptor` interface is a listener for when a read occurs against the response received from a remote service call.

=== WriterInterceptor

The `WriterInterceptor` interface is a listener for when a write occurs to the stream to be sent on the remote service invocation.

=== ResponseExceptionMapper

The `ResponseExceptionMapper` is specific to MicroProfile Rest Client.  This mapper will take a `Response` object retrieved via an invocation of a client and convert it to a `Throwable`, if applicable.  The runtime should scan all of the registered mappers, sort them ascending based on `getPriority()`, find the ones that can handle the given status code and response headers, and invoke them.  The first one discovered where `toThrowable` returns a non-null `Throwable` that can be thrown given the client method's signature will be thrown by the runtime.

==== How to Implement ResponseExceptionMapper

The specification provides default methods for `getPriority()` and `handles(int status, MultivaluedMap<String,Object> headers)` methods.  Priority is meant to be derived via a `@Priority` annotation added to the `ResponseExceptionMapper` implementation.  The runtime will sort ascending, taking the one with the lowest numeric value first to check if it can handle the `Response` object based on it's status code and headers.  The usage of ascending sorting is done to be consistent with JAX-RS behavior.

Likewise, the `handles` method by default will handle any response status code >= 400.  You may override this behavior if you so choose to handle other response codes (both a smaller ranger and a larger range are expected) or base the decision on the response headers.

The `toThrowable(Response)` method actually does the conversion work.  This method should not raise any `Throwable`, instead just return a `Throwable` if it can.  This method may return `null` if no throwable should be raised.  If this method returns a non-null throwable that is a sub-class of RuntimeException or Error (i.e. unchecked throwables), then this exception will be thrown to the client.  Otherwise, the (checked) exception will only be thrown to the client if the client method declares that it throws that type of exception (or a super-class).  For example, assume there is a client interface like this:
[source, java]
----
@Path("/")
public interface SomeService {
   @GET
   public String get() throws SomeException;

   @PUT
   public String put(String someValue);
}
----

and assume that the following ResponseExceptionMapper has been registered:
[source, java]
----
public class MyResponseExceptionMapper implements ResponseExceptionMapper<SomeException> {

   @Override
   public SomeException toThrowable(Response response) {
       return new SomeException();
   }
}
----

In this case, if the `get` method results in an exception (response status code of 400 or higher), SomeException will be thrown.  If the `put` method results in an exception, SomeException will not be thrown because the method does not declare that it throws SomeException.  If another ResponseExceptionMapper (such as the default mapper, see below) is registered that returns a subclass of RuntimeException or Error, then that exception will be thrown.

Any methods that read the response body as a stream must ensure that they reset the stream.

== Provider Declaration

In addition to defining providers via the client definition, interfaces may use the `@RegisterProvider` annotation to define classes to be registered as providers in addition to providers registered via the `RestClientBuilder`

=== Provider Priority

Providers may be registered via both annotations and the builder pattern.  Providers registered via  a builder will take precedence over the `@RegisterProvider` annotation. The `@RegisterProvider` annotation takes precedence over the `@Priority` annotation on the class.

Provider priorities can be overridden using the various `register` methods on `Configurable`, which can take a provider class, provider instance as well as priority and mappings of those priorities.

=== Feature Registration

If the type of provider registered is a `Feature`, then the priority set by that `Feature` will be a part of the builder as well.  Implementations must maintain the overall priority of registered providers, regardless of how they are registered.  A `Feature` will be used to register additional providers at runtime, and may be registered via `@RegisterProvider`, configuration or via `RestClientBuilder`.  A `Feature` will be executed immediately, as a result its priority is not taken into account (features are always executed).

== Automatic Provider Registration

Implementations may provide any number of providers registered automatically, but the following providers must be registered by the runtime.

=== JSON-P Provider

When an interface is registered that contains:

- `@Produces("*/json")` or
- `@Consumes("*/json")` or
- a method that declares input or output of type `javax.json.JsonValue` or any subclass therein

Then a JSON-P `MessageBodyReader` and `MessageBodyWriter` will be registered automatically by the implementation.  This is in alignment with the JAX-RS 2.0 specification.  The provider registered will have a priority of `Integer.MAX_VALUE`, allowing a user to register a custom provider to be used instead.

=== Default Message Body Readers and Writers

For the following types, and any media type, the runtime must support `MessageBodyReader`s and `MessageBodyWriter`s being automatically registered.

- `byte[]`
- `String`
- `InputStream`
- `Reader`
- `File`

==== Values supported with `text/plain`

The following types are supported for automatic conversion, only when the media type is `text/plain`.

- `Number`
- `Character` and `char`
- `Long` and `long`
- `Integer` and `int`
- `Double` and `double`
- `Float` and `float`
- `Boolean` and `boolean` (literal value of `true` and `false` only)

=== Default ResponseExceptionMapper

Each implementation will provide out of the box a `ResponseExceptionMapper` implementation that will map the response into a `WebApplicationException` whenever the response status code is >= 400.  It has a priority of `Integer.MAX_VALUE`.  It is meant to be used as a fall back whenever an error is encountered.  This mapper will be registered by default to all client interfaces.

This behavior can be disabled by adding a configuration property `microprofile.rest.client.disable.default.mapper` with value `true` that will be resolved as a `boolean` via MicroProfile Config.

It can also be disabled on a per client basis by using the same property when building the client, `RestClientBuilder.newBuilder().property("microprofile.rest.client.disable.default.mapper",true)`
